name: CI

on:
  push:
    branches: [ master ]

  pull_request:
    branches: [ master ]

  schedule:
    # * is a special character in YAML so you have to quote this string.
    # Run every Saturday and Monday at 9AM UTC.
    - cron:  '0 9 * * Sat,Mon'

jobs:
  turnstyle:
    runs-on: ubuntu-latest

    steps:
      # Turnstyle is used to prevent multiple push jobs from
      # running at the same time.
    - name: Turnstyle
      uses: softprops/turnstyle@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  infrastructure:
    # Wait for turnstyle to allow this job to run.
    needs: turnstyle
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      PULUMI_STACK_NAME: aws
    runs-on: ubuntu-latest

    steps:
    - name: Get current time
      uses: srfrnk/current-time@master
      id: current-time
      with:
        # Get the day of week as Sat, Sun, Mon etc.
        # This action uses MomentJS style syntax.
        format: ddd

    - uses: actions/checkout@v2

    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 12.x

    - name: Install Pulumi CLI
      uses: pulumi/action-install-pulumi-cli@releases/v1

    - name: Restore npm dependencies
      run: npm ci

    - name: Get stack outputs
      id: set-stack-output
      run: |
        echo "::set-output name=stackOutput::$(pulumi stack output -s $PULUMI_STACK_NAME --json)"

    # Always run a preview for pull_request events.
    - name: Preview changes for all stacks
      run: |
        echo "Previewing AWS stack..."
        pulumi preview -s aws

        echo "Previewing Azure stack..."
        pulumi preview -s azure
      if: github.event_name == 'pull_request' || steps.set-stack-output.outputs.stackOutput == '{}'

    # Always run an update for a push build, IFF the stack already has resources.
    - name: Update infrastructure
      run: pulumi up --yes -s ${PULUMI_STACK_NAME}
      if: github.event_name == 'push' && steps.set-stack-output.outputs.stackOutput != '{}'
      
    # If this is a scheduled execution, and it is a Saturday, run the update to create the resources.
    - name: Create infrastructure 
      run: pulumi up --yes -s ${PULUMI_STACK_NAME}
      if: github.event_name == 'schedule' && steps.current-time.outputs.formattedTime == 'Sat'
    
    # If this is a scheduled execution, and it is a Monday, destroy the resources.
    - name: Destroy AWS infrastructure
      if: env.PULUMI_STACK_NAME == 'aws' && github.event_name == 'schedule' && steps.current-time.outputs.formattedTime == 'Mon'
      run: |
        # First terminate the EC2 instance that fulfilled the Spot Instance Request (SIR).
        # To do that, we should first query for the instance ID from the SIR.
        SIR_ID=$(pulumi stack output spotRequestId -s "${PULUMI_STACK_NAME}")
        echo "Spot Instance Request ID is ${SIR_ID}"

        REGION=$(pulumi config get aws:region -s ${PULUMI_STACK_NAME})
        aws configure set region ${REGION}
        DESCRIBE_SIR=$(aws ec2 describe-spot-instance-requests --spot-instance-request-ids "${SIR_ID}")
        INSTANCE_ID=$(echo ${DESCRIBE_SIR} | jq '.SpotInstanceRequests[0].InstanceId' -c -r)

        # Finally terminate the instance.
        echo "Terminating the instance ${INSTANCE_ID}"
        aws ec2 terminate-instances --instance-ids "${INSTANCE_ID}"

        echo "Sleeping for 30s..."
        sleep 30

        pulumi destroy --yes -s ${PULUMI_STACK_NAME}
    
    - name: Destroy Azure infrastructure
      if: env.PULUMI_STACK_NAME == 'azure' && github.event_name == 'schedule' && steps.current-time.outputs.formattedTime == 'Mon'
      run: pulumi destroy --yes -s ${PULUMI_STACK_NAME}
